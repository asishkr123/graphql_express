type Query {
  User(_id: ID!): User!
  currentUser: User!
  getProfile: Profile
  currentProfile: Profile
  getProfileByHandle(handle: String!): Profile
  getPosts: [Post!]
  getAllProfiles: [Profile!]!
}

type Token {
  token: String!
}

type Post {
  text: String!
  likes: [ID!]
  user: User
  comment: [Comment!]
  posted: String
  _id: ID!
}

type Comment {
  text: String
  likes: [ID!]
  user: User
  post: Post!
  date: String
  _id: ID!
}

type User {
  name: String
  email: String
  password: String
  _id: ID
  posts: [Post!]
}

type Follower {
  user: User!
  following: User!
}

type Profile {
  handle: String
  skills: String
  company: String
  status: String
  githubusername: String
  bio: String
  from: String
  to: String
  following: [Follower!]
  user: User!
  friends: [ID!]
}

type Mutation {
  createUser(
    name: String!
    email: String!
    password: String!
    password2: String!
  ): User
  loginUser(email: String!, password: String!): Token!
  createProfile(
    handle: String!
    skills: String!
    company: String
    githubusername: String
    bio: String
    from: String
    to: String
    status: String
    website: String
  ): Profile!
  deleteProfile: String
  createPost(text: String!): Post
  deletePost(_id: ID!): String!
  createComment(text: String!, _id: ID!): Comment
  deleteComment(_id: ID!): String!
  likePost(_id: ID!): Post
  unLikePost(_id: ID!): Post
  followUser(_id: ID!): Follower
  addFriend(_id: ID!, request: Boolean!): Profile
  unFriend(_id: ID!): Profile
}
